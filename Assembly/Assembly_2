---

## 🧩 비트와 바이트

- **비트 (bit)**: 컴퓨터가 다루는 최소 단위. 0 또는 1의 값을 가짐.
- **바이트 (byte)**: 8비트 = 1바이트  
  예: `01000001` → 1바이트

---

## ✅ 양수/음수 표현 (2의 보수 방식)

- **양수**: 최상위 비트(MSB)가 `0`
  - 예: `00000010` = 2
- **음수**: 최상위 비트가 `1`, **2의 보수** 방식 사용
  - 예: `11111110`은 -2 (2의 보수)

### 2의 보수 계산 방법
1. 1의 보수 (0↔1 뒤집기)
2. 거기에 `+1`

---

## 🔢 진수 체계

### 10진수 (Decimal)
- 우리 일상에서 쓰는 숫자 체계
- 예: 123 = 1×100 + 2×10 + 3×1

### 2진수 (Binary)
- 컴퓨터 내부 표현 방식 (0, 1만 사용)
- 예: `1011` = 8 + 0 + 2 + 1 = **11**

### 16진수 (Hexadecimal)
- 0~9, A~F 사용 (총 16개)
- 예: `0x1A` = 1×16 + 10 = **26**

---

## 🧪 어셈블리 코드 (SASM 사용)

### 예제 코드
```asm
section .data
msg db "Hello World", 0x0a

section .text
global _start

_start:
  mov eax, 4
  mov ebx, 1
  mov ecx, msg
  mov edx, 12
  int 0x80
문자열 "Hello World"를 출력하는 간단한 예제

디버깅 화면
실행 중인 레지스터 상태, 메모리 값 등을 확인 가능

📦 데이터 단위
단위	크기
8 bit	1 byte
16 bit	2 byte
32 bit	4 byte (1 word)
64 bit	8 byte (1 qword)

🧮 레지스터 (Register)
사용 이유
빠름! 메모리보다 훨씬 빠른 연산 가능

CPU 내부 연산 필수 자원

레지스터 종류
EAX, EBX, ECX, EDX 등 (32bit 기준)

AX: 하위 16bit

AH: 상위 8bit

AL: 하위 8bit

📥 mov 명령어 사용 예
asm
복사
편집
mov eax, 1        ; 1을 eax에 저장
mov [msg], eax    ; eax 값을 msg 위치에 저장
데이터를 레지스터 → 메모리, 혹은 레지스터 → 레지스터로 복사 가능

✅ 요약 요약
컴퓨터는 2진수와 2의 보수로 모든 데이터를 표현함

음수, 진수 변환, 비트 계산 이해가 중요

레지스터 구조 및 어셈블리 명령어로 하드웨어 접근 가능

SASM 툴을 통해 실습도 가능!
